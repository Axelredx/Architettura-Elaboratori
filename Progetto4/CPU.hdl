// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//A/C-instruct controll inst[15] (most significant bit) + inst[5] (A destination)
	Not(in=instruction[15], out=ainstr);
	Not(in=ainstr, out=cinstr);
	And(a=cinstr, b=instruction[5], out=asel);
	Or(a=asel, b=ainstr, out=aload);
	
	//A-Register
	Mux16(a=instruction[0..15], b=outalu, sel=asel, out=ina);
	ARegister(in=ina, load=aload, out=outa);

	//choice A-instruction /inM
	Mux16(a=outa, b=inM[0..15], sel=instruction[12], out=amout);

	//Writing address in memory
	Or16(a=false, b=outa, out[0..14]=addressM);

	//load D-reg: C-instr + instr[4] (D destination)
	And(a=instruction[4], b=cinstr, out=dload);

	//D-Register
	DRegister(in=outalu, load=dload, out=outd);

	//ALU
	ALU(x=outd, y=amout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outalu, zr=outzr, ng=outng);
	
	//writing out in memory
	Or16(a=false, b=outalu, out[0..15]=outM);

	//jump>0 control: instruct[0]
	Or(a=outzr, b=outng, out=zrorng);
	Not(in=zrorng, out=notzrng);
	And(a=notzrng, b=instruction[0], out=jgt);

	//jump=0 control: zr (outalu==0) + instruct[1]
	And(a=outzr, b=instruction[1], out=jeq);

	//jump<0 control: ng (outalu<0) + instruct[2]
	And(a=outng, b=instruction[2], out=jlt);

	//PC load control
	Or(a=jeq, b=jlt, out=jleq);
	Or(a=jgt, b=jleq, out=jmp);
	And(a=jmp, b=cinstr, out=pcload);

	//PC incrementer
	Not(in=pcload, out=pcincr);

	//Program Counter
	PC(in=outa, inc=pcincr, load=pcload, reset=reset, out[0..14]=pc);

	//writingM C-instruct + instruct[3] (M destination)
	And(a=cinstr, b=instruction[3], out=writeM);
}