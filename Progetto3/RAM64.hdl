// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
	//combination address&load
	DMux8Way(in=load, sel=address[0..2], a=A, b=B, c=C, d=D, e=E, f=F, g=G, h=H);

	//64 register = 8 RAM8
	RAM8(in=in[0..15], load=A, address=address[3..5],  out=outa);
	RAM8(in=in[0..15], load=B, address=address[3..5],  out=outb);
	RAM8(in=in[0..15], load=C, address=address[3..5],  out=outc);
	RAM8(in=in[0..15], load=D, address=address[3..5],  out=outd);
	RAM8(in=in[0..15], load=E, address=address[3..5],  out=oute);
	RAM8(in=in[0..15], load=F, address=address[3..5],  out=outf);
	RAM8(in=in[0..15], load=G, address=address[3..5],  out=outg);
	RAM8(in=in[0..15], load=H, address=address[3..5],  out=outh);

	Mux8Way16(a=outa, b=outb, c=outc, d=outd, e=oute, f=outf, g=outg, h=outh, sel=address[0..2], out=out[0..15]);
}